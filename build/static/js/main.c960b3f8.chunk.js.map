{"version":3,"sources":["assets/logo_hearthstone.png","assets/poster1.jpg","assets/poster2.jpg","assets/poster3.jpg","assets/poster4.jpg","assets/poster5.jpg","assets/poster6.jpg","assets/poster7.jpg","assets/loading.gif","components/ButtonStart.jsx","services/api.js","config/auth.js","components/Content.jsx","App.js","index.js"],"names":["module","exports","ButtonStart","props","action","className","onClick","alt","src","logo","api","axios","create","baseURL","access_token","Content","useState","cardsScreen","setCardsScreen","cards","setCards","cardBacks","setCardBacks","cardCompare","setCardCompare","showButtonStart","setShowButtonStart","cardBlocked","setCardBlocked","cardsFlipped","setCardsFlipped","loading","setLoading","shuffle","array","i","length","j","Math","floor","random","handleGetApi","query","a","url","page","locale","get","handleFlipCard","event","cardPosition","Number","currentTarget","id","cardClicked","image","imageBack","useEffect","background","poster1","poster2","poster3","poster4","poster5","poster6","poster7","backgroundChoice","document","body","style","backgroundImage","cardPositions","map","card","index","pos0","pos1","cardsList","setTimeout","filter","apiData","pageCount","data","pageRandom","apiDataFinal","cardBacksCount","cardBacksRandom","cardsCount","cardExists","cardsRandom","includes","getCardBacks","apiKey","getCards","loadingAnimation","width","height","console","log","cardScreen","key","disabled","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c960b3f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_hearthstone.09742d6d.png\";","module.exports = __webpack_public_path__ + \"static/media/poster1.75fa7662.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster2.dd39ba9d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster3.03de35aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster4.eba7ec5b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster5.09cae375.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster6.6ff0c46a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/poster7.1b2c1f8a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/loading.c0814bd5.gif\";","import React from 'react'\n\nimport logo from \"../assets/logo_hearthstone.png\"\nimport \"./ButtonStart.css\"\n\n\nexport default function ButtonStart(props) {  \n  const { action } = props\n\n  return (\n    <button className=\"btStart\" onClick={action}>\n      <img alt=\"\" src={logo} />\n      START GAME            \n    </button>  \n  )  \n}\n\n\n","import axios from 'axios'\n\nconst api = axios.create({\n  baseURL: 'https://us.api.blizzard.com/hearthstone'\n})\n\nexport default api\n\n","const access_token = \"USJYbFplnoF7Yp5sxJUVw5uMXd1GjK1WG2\"\n\nexport default access_token\n","import React, { useEffect, useState } from \"react\"\n\nimport ButtonStart from \"../components/ButtonStart\"\n\nimport api from \"../services/api\"\nimport apiKey from \"../config/auth\"\n\nimport \"./Content.css\"\n\nimport poster1 from \"../assets/poster1.jpg\"\nimport poster2 from \"../assets/poster2.jpg\"\nimport poster3 from \"../assets/poster3.jpg\"\nimport poster4 from \"../assets/poster4.jpg\"\nimport poster5 from \"../assets/poster5.jpg\"\nimport poster6 from \"../assets/poster6.jpg\"\nimport poster7 from \"../assets/poster7.jpg\"\nimport loadingAnimation from \"../assets/loading.gif\"\n\nexport default function Content() {\n  const [cardsScreen, setCardsScreen] = useState([])\n  const [cards, setCards] = useState([])\n  const [cardBacks, setCardBacks] = useState([])\n  const [cardCompare, setCardCompare] = useState([])\n  const [showButtonStart, setShowButtonStart] = useState(true)\n  const [cardBlocked, setCardBlocked] = useState([]) \n  const [cardsFlipped, setCardsFlipped] = useState([]) \n  const [loading, setLoading] = useState(true)\n\n  function shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      ;[array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n  }\n\n  async function handleGetApi(query) {\n    const { url, access_token, page, locale } = query\n    return await api.get(\n      `${url}?access_token=${access_token}&page=${page}&locale=${locale}`\n    )\n  }\n\n  useEffect(() => {\n    const background = [poster1, poster2, poster3, poster4, poster5, poster6, poster7]      \n    const backgroundChoice = background[Math.floor(Math.random() * background.length)];    \n\n    document.body.style.backgroundImage = `url(${backgroundChoice})`\n  },[])\n\n  function handleStart() {    \n    console.log(cards)\n    setShowButtonStart(false)    \n    setCardsScreen(cards)\n\n    setTimeout(() => {\n      setCardsScreen(cardBacks)\n    }, 5000)\n  }\n\n  function handleFlipCard(event) {        \n    const cardPosition = Number(event.currentTarget.id)\n\n    const cardClicked = {\n      id: cards[cardPosition].id,\n      cardPosition,      \n      image: cards[cardPosition].image,\n      imageBack: cardBacks[cardPosition].image,\n    }\n    setCardsFlipped([...cardsFlipped, cardPosition])\n\n    setCardCompare([...cardCompare, cardClicked]) \n\n    cardsScreen[cardPosition] = cardClicked\n\n    setCardsScreen(cardsScreen)\n  }\n\n  useEffect(() => {\n    //console.log('CARDSFLIPPED', cardsFlipped)\n\n    if (cardCompare.length === 1) {\n      setCardBlocked(cardsFlipped)\n    }\n\n    if (cardCompare.length === 2) {                \n      const cardPositions = cardsScreen.map((card, index) => index)      \n\n      setCardBlocked(cardPositions) \n\n      const pos0 = Number(cardCompare[0].cardPosition)\n      const pos1 = Number(cardCompare[1].cardPosition)\n      \n      if (cardCompare[0].id !== cardCompare[1].id) {  \n        const cardsList = cardsScreen.map((card) => card)\n\n        setTimeout(() => {\n          cardsList[pos0].image = cardCompare[0].imageBack\n          cardsList[pos1].image = cardCompare[1].imageBack\n\n          setCardsScreen(cardsList)  \n                    \n          const a = cardsFlipped.filter(card => card !== pos0 && card !== pos1)          \n\n          setCardsFlipped(a)          \n          setCardBlocked(a)          \n        }, 2000)\n      } else { //Match!                      \n        setCardBlocked([])\n        setCardBlocked(cardsFlipped)        \n      }\n         \n      setCardCompare([])      \n    }\n\n  }, [cardCompare, cardsFlipped, cardsScreen]) \n\n  useEffect(() => {   \n    async function getCardBacks(query) {\n      //Bate na api para pegar quantidade de páginas e cardBacks (exceto quantidade de cards da última página)\n      const apiData = await handleGetApi(query)\n      const pageCount = apiData.data.pageCount - 1      \n      \n      //Bate na api mais uma vez, agora escolhendo uma página aleatória e cardBacks aleatórios\n      const pageRandom = Math.floor(Math.random() * pageCount) + 1\n      query.page = pageRandom\n      const apiDataFinal = await handleGetApi(query)\n      const cardBacksCount = apiDataFinal.data.cardBacks.length\n\n      //CardBacks aleatórios considerando também a última página (que pode possuir menos cardBacks que as demais páginas)\n      const cardBacksRandom = Math.floor(Math.random() * cardBacksCount)\n          \n      const cardBacks = []\n\n      // Compondo array de cardBacks\n      for (let i = 0; i < 18; i++) {\n        cardBacks[i] = apiDataFinal.data.cardBacks[cardBacksRandom]\n      }\n      \n      setCardBacks(cardBacks)\n    }\n    const queryCardBacks = {\n      url: 'cardbacks',\n      access_token: apiKey,\n      page: 1,\n      locale: 'pt_BR'\n    }    \n    getCardBacks(queryCardBacks)    \n\n    async function getCards(query) {\n      //Bate na api para pegar quantidade de páginas \n      const apiData = await handleGetApi(query)\n      const pageCount = apiData.data.pageCount - 1\n\n      //Bate na api mais uma vez, agora escolhendo uma página aleatória e cards aleatórios\n      const pageRandom = Math.floor(Math.random() * pageCount) + 1\n      query.page = pageRandom\n      const apiDataFinal = await handleGetApi(query)\n      const cardsCount = apiDataFinal.data.cards.length\n  \n      let cardsRandom\n      const cardExists = []\n      const data = []\n\n      // Compondo array de cards aleatórios\n      for (let i = 0; i < 9; i++) {\n        cardsRandom = Math.floor(Math.random() * cardsCount)            \n\n        if (cardExists.includes(cardsRandom)) {           \n          i = i - 1\n        } else {\n          cardExists[i] = cardsRandom\n          data[i] = apiDataFinal.data.cards[cardsRandom]\n        }            \n      }\n\n      const cards = [...data, ...data]\n\n      shuffle(cards)\n      setCards(cards)\n      setLoading(false) \n    }\n\n    const queryCards = {\n      url: \"cards\",\n      access_token: apiKey,\n      page: 1,\n      locale: 'pt_BR'\n    }\n    getCards(queryCards)     \n\n  }, [])\n\n  return (\n    <>            \n      <div className=\"cards\">                \n        {                     \n          loading           \n          ? <img alt=\"\" src={loadingAnimation} className=\"loading\" width=\"100%\" height=\"100%\" />          \n          : showButtonStart \n            ? <ButtonStart action={handleStart} />      \n            : null            \n        }\n        <ul className=\"cards__list\">\n          {cardsScreen.map((cardScreen, index) => (\n            <li className=\"cards__item\" key={index}>\n              <button className=\"btCard\" onClick={handleFlipCard} disabled={cardBlocked.includes(index)} id={index} >\n              <img\n                alt=\"\"\n                className=\"cards__image\"\n                src={cardScreen.image}                \n                id={index}                \n              />\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  )\n}\n","import React from \"react\"\nimport Content from \"./components/Content\"\n\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <>      \n      <div className=\"container\">      \n        \n        <Content />        \n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}